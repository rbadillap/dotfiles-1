snippet const
const ${1:name} = ${2:value};$0
endsnippet

snippet let
let ${1:name} = ${2:value};$0
endsnippet

snippet import
import ${1:name} from '${2:path}';$0
endsnippet

snippet export "default"
export default ${1:name};$0
endsnippet

snippet class
class ${1:`!p snip.rv = snip.basename.capitalize() or 'ClassName'`} {
	${VISUAL}$0
}
endsnippet

snippet "class extends"
class ${1:`!p snip.rv = snip.basename.capitalize() or 'ClassName'`} extends ${2:SuperclassName} {
	${VISUAL}$0
}
endsnippet

snippet "if without braces"
if (${1:condition}) ${VISUAL}$0
endsnippet

snippet if "If"
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet ifee "If / Else if / Else"
if (${1:condition}) {
	${VISUAL}$2
} else if (${3:condition}) {
	${4:return;}
} else {
	${5:return;}
}
endsnippet

snippet ife "If / Else"
if (${1:condition}) {
	${VISUAL}$2
} else {
	${3:return;}
}
endsnippet

snippet function
function ${1:name}(${2}) {
	${VISUAL:}$0
}
endsnippet

snippet arrow " " w
${1:params} => ${VISUAL}$0
endsnippet

snippet try
try {
	${VISUAL}$1
} catch (e) {
	$0
}
endsnippet

snippet ternary " " w
${1:condition} ? ${2:then} : ${3:else}
endsnippet

snippet toArray
Array.from(${VISUAL}$1)$0
endsnippet

snippet constructor
constructor(${1:options}) {
	${VISUAL}$0
}
endsnippet
