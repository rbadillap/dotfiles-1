#!/bin/bash

. ./vars.sh

. ./helper/echos.sh
. ./helper/sudo.sh
. ./helper/os.sh
. ./helper/brew.sh
. ./helper/pacaur.sh
. ./helper/package.sh
. ./helper/dir.sh
. ./helper/symlink.sh
. ./helper/eval_cmd.sh
. ./helper/download.sh
. ./helper/remove.sh
. ./helper/extract.sh
. ./helper/gpg.sh
. ./helper/git.sh

print_header Bootstrap

ask_for_sudo

print_running_inline "GPG Password:"
read -sr password
clear_line

if on_mac; then
  install_brew
  brew_install gpg
  brew_install gpg-agent
elif on_arch; then
  package_install gnupg
  make_dir "$HOME/.gnupg"
  symlink "$DOTFILES/settings/gpg-agent.conf" "$HOME/.gnupg/gpg-agent.conf"
  eval_cmd "Reload gpg agent" "gpg-connect-agent reloadagent /bye"

  install_pacaur
fi

package_install git

download "http://www.roemisch-drei.de/gpg.zip" "$HOME/gpg.zip"
extract_zip_with_password "$HOME/gpg.zip" "$password" "$HOME"
remove "$HOME/gpg.zip"
gpg_import_private_key "$HOME/gpg/private_key.key" "$(cat "$HOME/gpg/id")"
gpg_import_public_key "$HOME/gpg/public_key.key" "$(cat "$HOME/gpg/id")"
remove "$HOME/gpg"

if on_mac; then
  brew_install git-crypt
elif on_arch; then
  pacaur_install git-crypt
fi

git_clone "https://github.com/rusty1s/dotfiles" "$DOTFILES"
git_crypt_unlock "$DOTFILES"
